        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      isrReset ; Reset        ; Int 08h (IRQ 0)
        dd      isrTick ; Tick          ; Int 09h (IRQ 1)
        dd      isrKeyPress ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

; Generated by c86 (BYU-NASM) 5.1 (beta) from yakk.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
running:
	DW	0
currIndex:
	DW	0
YKTickNum:
	DW	0
YKIdleCount:
	DW	0
taskCount:
	DW	0
interrupt_depth:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	26
	; >>>>> void YKInitialize(){ 
	jmp	L_yakk_1
L_yakk_2:
	; >>>>> Line:	27
	; >>>>> YKNewTask(*YKIdleTask, (void * 
	mov	al, 255
	push	ax
	mov	ax, (IdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	28
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	mov	sp, bp
	pop	bp
	ret
L_yakk_1:
	push	bp
	mov	bp, sp
	jmp	L_yakk_2
	ALIGN	2
InitStack:
	; >>>>> Line:	33
	; >>>>> { 
	jmp	L_yakk_4
L_yakk_5:
	; >>>>> Line:	36
	; >>>>> base_pointer = tasks[taskCount].stack_pointer; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	38
	; >>>>> tasks[taskCount].stack_pointer--; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	sub	word [si], 2
	; >>>>> Line:	39
	; >>>>> *(tasks[taskCount].stack_pointer) = 0x200; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	si, word [si]
	mov	word [si], 512
	; >>>>> Line:	40
	; >>>>> tasks[taskCount].stack_pointer--; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	sub	word [si], 2
	; >>>>> Line:	42
	; >>>>> *(tasks[taskCount].stack_pointer) = 0x0000; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	si, word [si]
	mov	word [si], 0
	; >>>>> Line:	44
	; >>>>> tasks[taskCount].stack_pointer--; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	sub	word [si], 2
	; >>>>> Line:	45
	; >>>>> *(tasks[taskCount].stack_pointer) = (int)task; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	si, word [si]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	46
	; >>>>> tasks[taskCount].stack_pointer--; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	sub	word [si], 2
	; >>>>> Line:	47
	; >>>>> *(tasks[taskCount].stack_pointer) = (int) base_pointer; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	si, word [si]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	48
	; >>>>> for(i = 0 ; i <  
	mov	word [bp-2], 0
	jmp	L_yakk_7
L_yakk_6:
	; >>>>> Line:	50
	; >>>>> tasks[taskCount].stack_pointer--; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	sub	word [si], 2
	; >>>>> Line:	52
	; >>>>> *(tasks[taskCount].stack_pointer) = 0x0000; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	si, word [si]
	mov	word [si], 0
L_yakk_9:
	inc	word [bp-2]
L_yakk_7:
	cmp	word [bp-2], 8
	jl	L_yakk_6
L_yakk_8:
	mov	sp, bp
	pop	bp
	ret
L_yakk_4:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakk_5
	ALIGN	2
YKNewTask:
	; >>>>> Line:	57
	; >>>>> void YKNewTask(void (*task)(void), void* taskStack, unsigned char priority){ 
	jmp	L_yakk_11
L_yakk_12:
	; >>>>> Line:	58
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	59
	; >>>>> tasks[taskCount] . stack_pointer = (int*)taskStack; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	60
	; >>>>> tasks[taskCount] . ready = READY; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	61
	; >>>>> tasks[taskCount] . delay_count = 0; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	62
	; >>>>> tasks[taskCount] . priority = priority; 
	mov	ax, word [taskCount]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 6
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	63
	; >>>>> InitStack(*task); 
	push	word [bp+4]
	call	InitStack
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> taskCount++; 
	inc	word [taskCount]
	; >>>>> Line:	65
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	66
	; >>>>> if (running){ 
	mov	ax, word [running]
	test	ax, ax
	je	L_yakk_13
	; >>>>> Line:	67
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakk_13:
	mov	sp, bp
	pop	bp
	ret
L_yakk_11:
	push	bp
	mov	bp, sp
	jmp	L_yakk_12
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	72
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakk_15
L_yakk_16:
	; >>>>> Line:	73
	; >>>>> while(1){ 
	jmp	L_yakk_18
L_yakk_17:
	; >>>>> Line:	74
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	75
	; >>>>> YKIdleCount++ 
	inc	word [YKIdleCount]
	; >>>>> Line:	76
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakk_18:
	jmp	L_yakk_17
L_yakk_19:
	mov	sp, bp
	pop	bp
	ret
L_yakk_15:
	push	bp
	mov	bp, sp
	jmp	L_yakk_16
L_yakk_21:
	DB	"Running...",0xA,0
	ALIGN	2
YKRun:
	; >>>>> Line:	81
	; >>>>> void YKRun(){ 
	jmp	L_yakk_22
L_yakk_23:
	; >>>>> Line:	82
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	83
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	84
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	85
	; >>>>> printString("Running...\n"); 
	mov	ax, L_yakk_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakk_22:
	push	bp
	mov	bp, sp
	jmp	L_yakk_23
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	90
	; >>>>> void YKDelayTask(unsigned delay){ 
	jmp	L_yakk_25
L_yakk_26:
	; >>>>> Line:	91
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	92
	; >>>>> tasks[currIndex].ready = DELAY; 
	mov	ax, word [currIndex]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	93
	; >>>>> tasks[currIndex].delay_count = delay; 
	mov	ax, word [currIndex]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	94
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	95
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakk_25:
	push	bp
	mov	bp, sp
	jmp	L_yakk_26
	ALIGN	2
YKScheduler:
	; >>>>> Line:	99
	; >>>>> void YKScheduler(){ 
	jmp	L_yakk_28
L_yakk_29:
	; >>>>> Line:	105
	; >>>>> YKEnterMutex(); 
	mov	word [bp-4], 0
	; >>>>> Line:	105
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	106
	; >>>>> local_currIndex = currIndex; 
	mov	ax, word [currIndex]
	mov	word [bp-6], ax
	; >>>>> Line:	109
	; >>>>> for (i = 1; i < taskCount; i++) { 
	mov	word [bp-2], 1
	jmp	L_yakk_31
L_yakk_30:
	; >>>>> Line:	111
	; >>>>> if(tasks[i].ready == READY && tasks[i].priority < tasks[index 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakk_34
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 6
	mov	ax, word [bp-4]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	di, ax
	add	di, 6
	mov	al, byte [di]
	cmp	al, byte [si]
	jbe	L_yakk_34
	; >>>>> Line:	113
	; >>>>> index = i; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
L_yakk_34:
L_yakk_33:
	inc	word [bp-2]
L_yakk_31:
	mov	ax, word [taskCount]
	cmp	ax, word [bp-2]
	ja	L_yakk_30
L_yakk_32:
	; >>>>> Line:	116
	; >>>>> currIndex = index; 
	mov	ax, word [bp-4]
	mov	word [currIndex], ax
	; >>>>> Line:	117
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	121
	; >>>>> YKDispatcher(tasks[index].stack_pointer, &(tasks[local_currIndex])); 
	mov	ax, word [bp-6]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	push	ax
	mov	ax, word [bp-4]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, tasks
	push	word [si]
	call	YKDispatcher
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_yakk_28:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakk_29
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	125
	; >>>>> void YKEnterISR(){ 
	jmp	L_yakk_36
L_yakk_37:
	; >>>>> Line:	126
	; >>>>> interrupt_depth++; 
	inc	word [interrupt_depth]
	mov	sp, bp
	pop	bp
	ret
L_yakk_36:
	push	bp
	mov	bp, sp
	jmp	L_yakk_37
	ALIGN	2
YKExitISR:
	; >>>>> Line:	129
	; >>>>> void YKExitISR(){ 
	jmp	L_yakk_39
L_yakk_40:
	; >>>>> Line:	130
	; >>>>> if(--interrupt_depth == 0){ 
	mov	ax, word [interrupt_depth]
	dec	ax
	mov	word [interrupt_depth], ax
	test	ax, ax
	jne	L_yakk_41
	; >>>>> Line:	131
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakk_41:
	mov	sp, bp
	pop	bp
	ret
L_yakk_39:
	push	bp
	mov	bp, sp
	jmp	L_yakk_40
L_yakk_43:
	DB	"TICK ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	140
	; >>>>> { 
	jmp	L_yakk_44
L_yakk_45:
	; >>>>> Line:	144
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	145
	; >>>>> printString("TICK "); 
	mov	ax, L_yakk_43
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> printInt(YKTickNum); 
	push	word [YKTickNum]
	call	printInt
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	149
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	150
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	151
	; >>>>> for(i = 0; i< taskCount; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakk_47
L_yakk_46:
	; >>>>> Line:	152
	; >>>>> if (tasks[i] . delay_count != 0) { 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_yakk_50
	; >>>>> Line:	153
	; >>>>> tasks[i]  
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 4
	dec	word [si]
	; >>>>> Line:	154
	; >>>>> if (tasks[i] . delay_count == 0) { 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakk_51
	; >>>>> Line:	155
	; >>>>> tasks[i] . ready = READY; 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, tasks
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakk_51:
L_yakk_50:
L_yakk_49:
	inc	word [bp-2]
L_yakk_47:
	mov	ax, word [taskCount]
	cmp	ax, word [bp-2]
	ja	L_yakk_46
L_yakk_48:
	; >>>>> Line:	159
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakk_44:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakk_45
	ALIGN	2
isrHandle_reset:
	; >>>>> Line:	163
	; >>>>> { 
	jmp	L_yakk_53
L_yakk_54:
	; >>>>> Line:	165
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakk_53:
	push	bp
	mov	bp, sp
	jmp	L_yakk_54
L_yakk_58:
	DB	"DELAY KEY PRESSED",0
L_yakk_57:
	DB	") IGNORED",0
L_yakk_56:
	DB	"KEYPRESS (",0
	ALIGN	2
isrHandle_keyPress:
	; >>>>> Line:	171
	; >>>>> { 
	jmp	L_yakk_59
L_yakk_60:
	; >>>>> Line:	174
	; >>>>> if(KeyBuffer != 'd') 
	mov	word [bp-2], 0
	; >>>>> Line:	174
	; >>>>> if(KeyBuffer != 'd') 
	cmp	word [KeyBuffer], 100
	je	L_yakk_61
	; >>>>> Line:	176
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	177
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_yakk_56
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	178
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	179
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_yakk_57
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	180
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	181
	; >>>>> return; 
	jmp	L_yakk_62
L_yakk_61:
	; >>>>> Line:	184
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	185
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_yakk_58
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	186
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	189
	; >>>>> for(i = 0; i < 5000; i++) 
	mov	word [bp-2], 0
	jmp	L_yakk_64
L_yakk_63:
L_yakk_66:
	; >>>>> Line:	192
	; >>>>> } 
	inc	word [bp-2]
L_yakk_64:
	cmp	word [bp-2], 5000
	jl	L_yakk_63
L_yakk_65:
L_yakk_62:
	; >>>>> Line:	194
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yakk_59:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakk_60
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
IdleStk:
	TIMES	512 db 0
tasks:
	TIMES	32 db 0
currTask:
	TIMES	2 db 0
YKEnterMutex:
    cli
    ret

YKExitMutex:
    sti
    ret

pushAllTheCrap:
    push bp
    mov bp, sp
    push    ax        ;push everything
    push     bx
    push     cx
    push    dx                          
    push    si
    push    di
    push    ds
    push     es
    jmp return

popAllTheCrap:
    push bp
    mov bp, sp
    pop        es        ;pop everything
    pop     ds   
    pop     di
    pop        si                          
    pop        dx
    pop        cx
    pop        bx
    pop     ax
    jmp return

return:
    mov sp, bp
    pop bp
	sti
    ret

YKDispatcher:
	cli
    push bp
    mov bp, sp
    push ax
    mov ax, word [bp+4]
    cmp ax, [currTask]
    pop ax
    je    return

    inc word [YKCtxSwCount]
    cmp word [YKCtxSwCount], 1
    je restore_context
    push ax
    push bx
    push cx
    push dx
    push si
    push di
    push ds
    push es
    mov si, [bp+6]
	mov [si], sp

restore_context:
    mov sp, word [bp+4]
    pushf
    pop ax
    mov [bp+6], ax
    mov [bp+4], cs
    mov    [currTask], sp
    pop es
    pop ds
    pop di
    pop si
    pop dx
    pop cx
    pop bx
	pop ax
    pop bp
	sti
    iret

isrReset:
	push    ax		;push everything
	push 	bx
	push 	cx
	push	dx                           
    push	bp
	push	si
	push	di
	push	ds
	push 	es
	sti		;enable interrupts
	call isrHandle_reset				;run the handler
	cli				;disable interrupts
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	pop    	es		;pop everything
	pop 	ds	
	pop 	di
	pop		si                           
    pop		bp
	pop		dx
	pop		cx
	pop		bx
	pop 	ax
	iret
isrTick:
	push    ax		;push everything
	push 	bx
	push 	cx
	push	dx                           
    push	bp
	push	si
	push	di
	push	ds
	push 	es
	call YKEnterISR
	sti		;enable interrupts
	call YKTickHandler			;run the handler
	cli				;disable interrupts
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call YKExitISR
	pop    	es		;pop everything
	pop 	ds	
	pop 	di
	pop		si                           
    pop		bp
	pop		dx
	pop		cx
	pop		bx
	pop 	ax
	iret
isrKeyPress:
	push    ax		;push everything
	push 	bx
	push 	cx
	push	dx                           
    push	bp
	push	si
	push	di
	push	ds
	push 	es
	call YKEnterISR
	sti		;enable interrupts
	call isrHandle_keyPress			;run the handler
	cli				;disable interrupts
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call YKExitISR
	pop    	es		;pop everything
	pop 	ds	
	pop 	di
	pop		si                           
    pop		bp
	pop		dx
	pop		cx
	pop		bx
	pop 	ax
	iret

; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4c_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab4c_app_2:
	DB	"Starting kernel...",0xA,0
L_lab4c_app_1:
	DB	"Creating task...",0xA,0
	ALIGN	2
main:
	; >>>>> Line:	17
	; >>>>> { 
	jmp	L_lab4c_app_3
L_lab4c_app_4:
	; >>>>> Line:	18
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	20
	; >>>>> printString("Creating task...\n"); 
	mov	ax, L_lab4c_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> YKNewTask(Task, (void *) &TaskStack[256], 0); 
	xor	al, al
	push	ax
	mov	ax, (TaskStack+512)
	push	ax
	mov	ax, Task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	23
	; >>>>> printString("Starting kernel...\n"); 
	mov	ax, L_lab4c_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab4c_app_3:
	push	bp
	mov	bp, sp
	jmp	L_lab4c_app_4
L_lab4c_app_9:
	DB	" context switches! YKIdleCount is ",0
L_lab4c_app_8:
	DB	"Task running after ",0
L_lab4c_app_7:
	DB	"Delaying task...",0xA,0
L_lab4c_app_6:
	DB	"Task started.",0xA,0
	ALIGN	2
Task:
	; >>>>> Line:	28
	; >>>>> { 
	jmp	L_lab4c_app_10
L_lab4c_app_11:
	; >>>>> Line:	32
	; >>>>> printString("Task started.\n"); 
	mov	ax, L_lab4c_app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> while (1) 
	jmp	L_lab4c_app_13
L_lab4c_app_12:
	; >>>>> Line:	35
	; >>>>> printString("Delaying task...\n"); 
	mov	ax, L_lab4c_app_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	39
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	40
	; >>>>> numCtxSwitches = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	41
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-2], ax
	; >>>>> Line:	42
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	43
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	45
	; >>>>> printString("Task running after "); 
	mov	ax, L_lab4c_app_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printUInt(numCtxSwitches); 
	push	word [bp-4]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> printString(" context switches! YKIdleCount is "); 
	mov	ax, L_lab4c_app_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> printUInt(idleCount); 
	push	word [bp-2]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printString(".\n"); 
	mov	ax, (L_lab4c_app_1+15)
	push	ax
	call	printString
	add	sp, 2
L_lab4c_app_13:
	jmp	L_lab4c_app_12
L_lab4c_app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab4c_app_10:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab4c_app_11
	ALIGN	2
TaskStack:
	TIMES	512 db 0
